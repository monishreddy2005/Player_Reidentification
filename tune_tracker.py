#!/usr/bin/env python3
"""
Simple tracker tuning script - adjust parameters for your specific video
"""

import argparse
import sys
import os

def create_custom_tracker_config(similarity_threshold=0.7, 
                                max_distance=200, 
                                appearance_weight=0.8,
                                min_track_length=3,
                                max_missed_frames=30):
    """Create a custom tracker configuration."""
    
    config_code = f"""# Custom Robust Tracker Configuration
# Generated by tune_tracker.py

from robust_tracker import RobustPlayerTracker

class CustomRobustTracker(RobustPlayerTracker):
    '''Custom configured robust tracker for your specific needs.'''
    
    def __init__(self, debug_mode=True):
        super().__init__(debug_mode=debug_mode)
        
        # Custom parameters for your video
        self.similarity_threshold = {similarity_threshold}
        self.max_distance_threshold = {max_distance}
        self.appearance_weight = {appearance_weight}
        self.position_weight = {1.0 - appearance_weight}
        self.min_track_length = {min_track_length}
        self.max_missed_frames = {max_missed_frames}
        
        if self.debug_mode:
            print("üéØ Custom Robust Tracker Configuration:")
            print(f"   Similarity threshold: {{self.similarity_threshold}}")
            print(f"   Max distance: {{self.max_distance_threshold}}px")
            print(f"   Appearance weight: {{self.appearance_weight}}")
            print(f"   Position weight: {{self.position_weight}}")
            print(f"   Min track length: {{self.min_track_length}}")
            print(f"   Max missed frames: {{self.max_missed_frames}}")
"""
    
    return config_code

def main():
    """Main tuning function."""
    parser = argparse.ArgumentParser(description="Tune Tracker Parameters")
    parser.add_argument("--similarity", type=float, default=0.7,
                       help="Similarity threshold (0.3-0.9, lower=stricter)")
    parser.add_argument("--distance", type=int, default=200,
                       help="Max distance threshold in pixels (100-300)")
    parser.add_argument("--appearance", type=float, default=0.8,
                       help="Appearance weight (0.5-0.9, higher=more appearance focus)")
    parser.add_argument("--min_tracks", type=int, default=3,
                       help="Minimum track length before showing ID (1-10)")
    parser.add_argument("--missed_frames", type=int, default=30,
                       help="Max missed frames before removing track (10-60)")
    parser.add_argument("--output", type=str, default="custom_tracker.py",
                       help="Output file for custom tracker")
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("üéõÔ∏è Tracker Parameter Tuning")
    print("=" * 60)
    
    print(f"Current Configuration:")
    print(f"   Similarity threshold: {args.similarity}")
    print(f"   Max distance: {args.distance}px")
    print(f"   Appearance weight: {args.appearance}")
    print(f"   Position weight: {1.0 - args.appearance:.2f}")
    print(f"   Min track length: {args.min_tracks}")
    print(f"   Max missed frames: {args.missed_frames}")
    
    # Validation
    if not (0.1 <= args.similarity <= 0.95):
        print("‚ö†Ô∏è Warning: Similarity threshold should be between 0.1 and 0.95")
    
    if not (50 <= args.distance <= 500):
        print("‚ö†Ô∏è Warning: Distance threshold should be between 50 and 500 pixels")
    
    if not (0.3 <= args.appearance <= 0.95):
        print("‚ö†Ô∏è Warning: Appearance weight should be between 0.3 and 0.95")
    
    # Generate custom tracker
    config_code = create_custom_tracker_config(
        similarity_threshold=args.similarity,
        max_distance=args.distance,
        appearance_weight=args.appearance,
        min_track_length=args.min_tracks,
        max_missed_frames=args.missed_frames
    )
    
    # Save to file
    with open(args.output, 'w') as f:
        f.write(config_code)
    
    print(f"\n‚úÖ Custom tracker saved to: {args.output}")
    
    # Show usage instructions
    print(f"\nüìã How to use your custom tracker:")
    print(f"1. Import in your script:")
    print(f"   from {args.output.replace('.py', '')} import CustomRobustTracker")
    print(f"2. Use in main.py by replacing the tracker initialization")
    print(f"3. Or test with debug script:")
    print(f"   python3 debug_tracker.py --model_path your_model.pt")
    
    # Parameter recommendations
    print(f"\nüéØ Parameter Tuning Guidelines:")
    print(f"")
    print(f"üîß If IDs switch when players are FAR apart:")
    print(f"   - INCREASE similarity threshold (try {min(0.9, args.similarity + 0.1):.1f})")
    print(f"   - INCREASE max distance (try {args.distance + 50})")
    print(f"")
    print(f"üîß If IDs switch when players are CLOSE together:")
    print(f"   - DECREASE similarity threshold (try {max(0.3, args.similarity - 0.1):.1f})")
    print(f"   - INCREASE appearance weight (try {min(0.9, args.appearance + 0.1):.1f})")
    print(f"   - DECREASE max distance (try {max(100, args.distance - 50)})")
    print(f"")
    print(f"üîß If too many NEW IDs appear:")
    print(f"   - INCREASE min track length (try {args.min_tracks + 2})")
    print(f"   - DECREASE similarity threshold (try {max(0.3, args.similarity - 0.1):.1f})")
    print(f"")
    print(f"üîß If IDs disappear too quickly:")
    print(f"   - INCREASE max missed frames (try {args.missed_frames + 15})")
    print(f"   - INCREASE similarity threshold (try {min(0.9, args.similarity + 0.1):.1f})")

if __name__ == "__main__":
    main()